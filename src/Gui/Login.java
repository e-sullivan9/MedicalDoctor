/*
 * Team Name: Andrew's Honor Squad 2: High Honors
 * Team Members: Justin Jiang, Samir Leal, Phi Nguyen, Eric Sullivan
 * Date: 04-30-15
 *
 * Purpose: You and your team members will simulate to develop the software called
 * "Medical Doctor".  The software will be used in hospital for managing and updating
 * not only the patient information but also prescription, and other physical test.
 * The software should be developed with well-designed Graphical User Interface (GUI)
 * so that medical doctors can easily access and manage the patient information.
 *
 * Program Contents: The "Medical Doctor" software should have following contents on GUI:
 * 1. Registration
 * 2. Doctor General Practice
 * 3. Nursing
 */
package Gui;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.*;
import javax.swing.*;

/**
 *
 * @author Samir
 */
public class Login extends JFrame {

    /**
     * Creates new form Login
     */
    public Login() {
        
        // Initializes the components on the JFrame
        initComponents();
        this.passwordField.addKeyListener(new KeyListener());
        this.usernameTextField.addKeyListener(new KeyListener());
        // Positions the JFrame to the center of the screen
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 50)); // NOI18N
        jLabel1.setText("Login");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Username:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Password:");

        loginButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(usernameTextField)
                                    .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))))))
                .addContainerGap(139, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(loginButton)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Login button action performed method
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
    
        /*
        * Code to login user into the system.
        * 1. Checks if the username exists.
        * 2. If the username exists then we check if the password matches the
        *    password in the database.
        * 3. If the passwords match then the next screen opens.
        *
        try {
        
            // Creates a connection to the database
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/honorsmedicaldoctor", "HonorsAdmin", "h0n3r5a2m1n");
            
            // Selects the user from the database
            String sql = "SELECT * FROM users WHERE Username='" + usernameTextField.getText() + "';";
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            
            // If there exists a record for that username
            if (rs.next()) {
                
                // Gets the password inputed into the password field
                String password = "";
                char[] pass = passwordField.getPassword();
                
                // Stores the password from the password field into a String called password
                for (int i = 0; i < pass.length; i++) {
                    password = password + pass[i];
                }
                
                // If the password entered matches the password from the ResultSet
                if (password.equals(rs.getString("Password"))) {
                    
                    // If the person logs in as an Administrator
                    if (rs.getString("Section").equals("Administrator")) {
                        
                        // Open the Manage Users screen
                        ManageUsers manage = new ManageUsers();
                     
                    // Else if the person logs in as Registration
                    } else if (rs.getString("Section").equals("Registration")) {
                        
                        // Open the RegistrationSearch screen
                        RegistrationSearch registrationSearch = new RegistrationSearch();
                     
                    // Else if the person logs in as a Doctor
                    } else if (rs.getString("Section").equals("Doctor")) {
                        
                        // Open the DoctorSearch screen
                        Doctor doctorSearch = new Doctor();
                     
                    // Else if the user logs in as Nursing
                    } else if (rs.getString("Section").equals("Nursing")) {
                        
                        // Opens the NursingSearch screen
                        NursingSearch nursing = new NursingSearch();
                        
                    }
               
                // Else if the password entered does not match the password from the ResultSet
                } else {
                    
                    // Display an error message
                    JOptionPane.showMessageDialog(null, "Password Incorrect", "Login", JOptionPane.ERROR_MESSAGE);                    
                       
                }
                
            // Else if the username does not exist
            } else {
                
                // Display an error message
                JOptionPane.showMessageDialog(null, "User does not exist.", "Login", JOptionPane.ERROR_MESSAGE);
                
            }
            
            // Closes the connection to the database
            rs.close();
            stmt.close();
            con.close();
        
        } catch (ClassNotFoundException e) {
        
            // Prints out the exception
            System.out.println(e.getMessage());
            
        } catch (SQLException e) {
            
            // Prints out the exception
            System.out.println(e.getMessage());
            
        }
        
        // Clears the textfields
        usernameTextField.setText("");
        passwordField.setText("");
        */
        confirmLogin();
    }//GEN-LAST:event_loginButtonActionPerformed

    public void confirmLogin(){
            
        /*
        * Code to login user into the system.
        * 1. Checks if the username exists.
        * 2. If the username exists then we check if the password matches the
        *    password in the database.
        * 3. If the passwords match then the next screen opens.
        */
        try {
        
            // Creates a connection to the database
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/honorsmedicaldoctor", "HonorsAdmin", "h0n3r5a2m1n");
            
            // Selects the user from the database
            String sql = "SELECT * FROM users WHERE Username='" + usernameTextField.getText() + "';";
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            
            // If there exists a record for that username
            if (rs.next()) {
                
                // Gets the password inputed into the password field
                String password = "";
                char[] pass = passwordField.getPassword();
                
                // Stores the password from the password field into a String called password
                for (int i = 0; i < pass.length; i++) {
                    password = password + pass[i];
                }
                
                // If the password entered matches the password from the ResultSet
                if (password.equals(rs.getString("Password"))) {
                    
                    // If the person logs in as an Administrator
                    if (rs.getString("Section").equals("Administrator")) {
                        
                        // Open the Manage Users screen
                        ManageUsers manage = new ManageUsers();
                     
                    // Else if the person logs in as Registration
                    } else if (rs.getString("Section").equals("Registration")) {
                        
                        // Open the RegistrationSearch screen
                        RegistrationSearch registrationSearch = new RegistrationSearch();
                     
                    // Else if the person logs in as a Doctor
                    } else if (rs.getString("Section").equals("Doctor")) {
                        
                        // Open the DoctorSearch screen
                        Doctor doctorSearch = new Doctor();
                     
                    // Else if the user logs in as Nursing
                    } else if (rs.getString("Section").equals("Nursing")) {
                        
                        // Opens the NursingSearch screen
                        NursingSearch nursing = new NursingSearch();
                        
                    }
                    
                    // Disposes the login screen
                    this.dispose();
               
                // Else if the password entered does not match the password from the ResultSet
                } else {
                    
                    // Display an error message
                    JOptionPane.showMessageDialog(null, "Password Incorrect", "Login", JOptionPane.ERROR_MESSAGE);                    
                       
                }
                
            // Else if the username does not exist
            } else {
                
                // Display an error message
                JOptionPane.showMessageDialog(null, "User does not exist.", "Login", JOptionPane.ERROR_MESSAGE);
                
            }
            
            // Closes the connection to the database
            rs.close();
            stmt.close();
            con.close();
        
        } catch (ClassNotFoundException e) {
        
            // Prints out the exception
            System.out.println(e.getMessage());
            
        } catch (SQLException e) {
            
            // Prints out the exception
            System.out.println(e.getMessage());
            
        }
        
        // Clears the textfields
        usernameTextField.setText("");
        passwordField.setText("");
        
    }
    public class KeyListener extends KeyAdapter {
        public void keyPressed(KeyEvent e){
             if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                 confirmLogin();
             }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
